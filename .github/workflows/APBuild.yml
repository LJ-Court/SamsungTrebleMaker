# This is a basic workflow to help you get started with Actions

name: Treble Creator

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      device:
        description: "Device Model Number"
        required: True
        type: choice
        options:
          - SM-T225
      region:
        description: "Device Region"
        required: true
        type: choice
        options:
          - BTU
      arch:
        description: "Device Architecture"
        default: "arm64"
        type: choice
        options:
          - arm64
          - arm32
      apps:
        description: "Preinstalled Applications"
        type: choice
        options:
          - floss
          - gapps
          - gogapps
          - vanilla
      vndklite:
        description: "Vndklite ROM or not"
        type: boolean
      secure:
        description: "Secure ROM or not"
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  urlfinder:
    runs-on: ubuntu-latest
    outputs:
      jobinfo: ${{ steps.get-url.outputs.finalurl }}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" 
            
      - name: Generate URL
        id: get-url
        shell: python
        run: |
            import os
            url = {}
            apps = "${{ github.event.inputs.apps }}"
            arch = "${{ github.event.inputs.arch }}"
            vndklite = "${{ github.events.inputs.vndklite }}"
            secure = "${{ github.events.inputs.secure }}"
            
            match apps:
              case "gapps":
                appTest = "select(.name | test(\"gapps\")) | select(.name | test(\"gogapps\") | not) |";
              case "gogapps":
                appTest = "select(.name | test(\"gogapps\")) |";
              case "floss":
                appTest = "select(.name | test(\"floss\")) |";
              case _:
                appTest = "select(.name | test(\"vanilla\"))";
            
            
            match arch:
              case "arm32":
                archTest = "select(.name | test(\"arm32_binder64\")) |";
                match apps:
                  case "gapps":
                    appTest = "select(.name | test(\"gogapps\")) |";
                  case "gogapps":
                    appTest = "select(.name | test(\"gogapps\")) |";
                  case _:
                    appTest = "select(.name | test(\"vanilla\")) |";
              case _:
                archTest = "select(.name | test(\"arm64\")) |";
            
            match vndklite:
              case "true":
                vndkliteTest = "select(.name | test(\"vndklite\")) |";
              case _:
                vndkliteTest = "select(.name | test(\"vndklite\") | not) |";
            
            match secure:
              case "true":
                secureTest = "select(.name | test(\"secure\")) |";
                vndkliteTest = "select(.name | test(\"vndklite\")) |";
              case _:
                secureTest = "select(.name | test(\"secure\") | not) |";
            
            finalurlquery = f"{appTest} {archTest} {vndkliteTest} {secureTest} .browser_download_url";
            print(finalurlquery)
            with open(os.getenv("GITHUB_ENV"), "a") as g:
              g.write(f"urlquery={finalurlquery}\n")
                
    
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Add OTATools PATH Environment
        run: |
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          echo "/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          sudo apt-get install simg2img lz4 unzip jq
          pip3 install git+https://github.com/samloader/samloader.git
          echo $GITHUB_WORKSPACE
          echo ${{ github.event.inputs.device }}
          echo ${{ github.event.inputs.region }}
      
      - name: Download and Decrypt Firmware
        run: |
          FWFileName="latestFW.zip.enc4"
          export FMV=$(samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} checkupdate)
          echo $FMV
          echo "Downloading latest update"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} download -v $(echo $FMV) -o $(echo $FWFileName)
          echo "Decrypting Update Files"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} decrypt -v $(echo $FMV) -i $(echo $FWFileName) -V 4 -o latestFW.zip
        
      - name: Unzip Firmware and Extract AP
        run: |
          echo $FMV
          mkdir APFiles
          unzip latestFW.zip
          ls -l
          mv AP_*.tar.md5 ./APFiles
          cd APFiles
          mkdir APExtracted
          ls -l
          tar -xf AP_*.tar.md5 --verbose -C ./APExtracted
          
      - name: Measure and unpack super image
        id: superImageSIze
        run: |
          cd APFiles/APExtracted
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          chmod +x /home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/lpunpack
          chmod +x /home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/lpmake
          lz4 -d super.img.lz4 super.img
          simg2img super.img super.ext4.img
          OG_SUPER_SIZE=$(stat -c '%s' super.ext4.img)
          echo "::set-output name=ORIGINAL_SUPER_IMAGE_SIZE::$OG_SUPER_SIZE"
          mkdir superImageFiles
          ls -l
          rm super.img.lz4
          rm super.img
          lpunpack super.ext4.img ./superImageFiles
      
      - name: Replace old system image and measure size of partitions
        id: imageSizes
        run: |
          cd APFiles/APExtracted/superImageFiles/
          rm system.img
          finalAddress=$(curl -s https://api.github.com/repos/phhusson/treble_experimentations/releases/latest | jq -r ${{ env.urlquery }} )
          echo $finalAddress
          # xz --decompress system.img.xz
          # rm system.img.xz
          # ODM_SIZE=$(stat -c '%s' odm.img)
          # SYSTEM_SIZE=$(stat -c '%s' system.img)
          # PRODUCT_SIZE=$(stat -c '%s' product.img)
          # VENDOR_SIZE=$(stat -c '%s' vendor.img)
          # TOTAL_SIZE=($(echo $ODM_SIZE) + $(echo $SYSTEM_SIZE) + $(echo $PRODUCT_SIZE) + $(echo $VENDOR_SIZE) + ${{ steps.superImageSize.outputs.ORIGINAL_SUPER_IMAGE_SIZE }})
          
          # echo "::set-output name=SUM_OF_ALL_PARTITIONS_SIZES::$TOTAL_SIZE"
          # echo "::set-output name=ODM_PARTITION_SIZE::$ODM_SIZE"
          # echo "::set-output name=PRODUCT_PARTITION_SIZE::$PRODUCT_SIZE"
          # echo "::set-output name=SYSTEM_PARTITION_SIZE::$SYSTEM_SIZE"
          # echo "::set-output name=VENDOR_PARTITION_SIZE::$VENDOR_SIZE"
          
          
          
      - name: Create New Super Image
        id: superImage
        run: |
          # cd APFiles/APExtracted/superImageFiles/
          # echo ${{ steps.superImageSize.outputs.ORIGINAL_SUPER_IMAGE_SIZE }}
          # lpmake --metadata-size 65536 \
          # --super-name super \
          # --metadata-slots 2 \
          # --device super:${{ steps.superImageSize.outputs.ORIGINAL_SUPER_IMAGE_SIZE }} \
          # --group main:${{ steps.imageSizes.outputs.SUM_OF_ALL_PARTITIONS_SIZES }} \
          # --partition odm:readonly:${{ steps.imageSizes.outputs.ODM_PARTITION_SIZE }}:main \
          # --image odm=./odm.img \
          # --partition product:readonly:${{ steps.imageSizes.outputs.PRODUCT_PARTITION_SIZE }}:main \
          # --image product=./product.img \
          # --partition system:readonly:${{ steps.imageSizes.outputs.SYSTEM_PARTITION_SIZE }}:main \
          # --image system=./system.img \
          # --partition vendor:readonly:${{ steps.imageSizes.outputs.VENDOR_PARTITION_SIZE }}:main \
          # --image vendor=./vendor.img \
          # --sparse \
          # --output /output/super_new.img
          
      - name: Test Super Output
        run: |
          cd /output
          ls -l
          
        
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          # The token used to authenticate.
          token: ${{ github.token }}
          # The name of the repository.
          repository:  ${{ github.repository }}
          # The number of days.
          retain_days: 0
          # The minimum runs to keep for each workflow.
          keep_minimum_runs: 0
  
  compileFiles:
    runs-on: windows-latest
    needs: build
    steps:
      - name: testRun
        run: |
          cd /
          ls
          


