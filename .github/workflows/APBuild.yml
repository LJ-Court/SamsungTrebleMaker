# This is a basic workflow to help you get started with Actions

name: Treble Creator

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      device:
        description: "Device Model Number"
        required: True
        type: choice
        options:
          - SM-T225
      region:
        description: "Device Region"
        required: true
        type: choice
        options:
          - BTU
      arch:
        description: "Device Architecture"
        default: "arm64"
        type: choice
        options:
          - arm64
          - arm32
      apps:
        description: "Preinstalled Applications"
        type: choice
        options:
          - floss
          - gapps
          - gogapps
          - vanilla
      vndklite:
        description: "Vndklite ROM or not"
        type: boolean
      secure:
        description: "Secure ROM or not"
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  urlfinder:
    runs-on: ubuntu-latest
    outputs:
      jobinfo: ${{ steps.get-url.outputs.finalurl }}
    steps:
      - name: Generate URL
        id: get-url
        uses: actions/github-script@v6.1.0
        with:
          script: |
            let url = {}
            let apps = "${{ github.event.inputs.apps }}"
            let arch = "${{ github.event.inputs.arch }}"
            let vndklite = "${{ github.events.inputs.vndklite }}"
            let secure = "${{ github.events.inputs.secure }}"
            switch ( apps ) {
              case "gapps":
                let appTest = "select(.name | test(\"gapps\")) | select(.name | test(\"gogapps\") | not) |";
                break;
              case "gogapps":
                let appTest = "select(.name | test(\"gogapps\")) |";
                break;
              case "floss":
                let appTest = "select(.name | test(\"floss\")) |";
                break;
              default:
                let appTest = "select(.name | test(\"vanilla\"))";
                break;
            }
            
            switch ( arch ) {
              case "arm32":
                let archTest = "select(.name | test(\"arm32_binder64\")) |";
                switch ( apps ) {
                  case "gapps":
                    appTest = "select(.name | test(\"gogapps\")) |";
                    break;
                  case "gogapps":
                    appTest = "select(.name | test(\"gogapps\")) |";
                    break;
                  default:
                    appTest = "select(.name | test(\"vanilla\")) |";
                    break;
                };
                break;
              default:
                let archTest = "select(.name | test(\"arm64\")) |";
                break;
            }
            
            switch ( vndklite ) {
              case true:
                let vndkliteTest = "select(.name | test(\"vndklite\")) |";
                break;
              default:
                let vndkliteTest = "select(.name | test(\"vndklite\") | not) |";
                break;
            
            switch ( secure ) {
              case true:
                let secureTest = "select(.name | test(\"secure\")) |";
                vndkliteTest = "select(.name | test(\"vndklite\")) |";
                break;
              default:
                let secureTest = "select(.name | test(\"secure\") | not) |";
                break;
            
            url.finalurlquery = "$appTest $archTest $secureTest $vndkliteTest"
            echo url.finalurlquery
                
    
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Add OTATools PATH Environment
        run: |
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          echo "/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          sudo apt-get install simg2img lz4 unzip jq
          pip3 install git+https://github.com/samloader/samloader.git
          echo $GITHUB_WORKSPACE
          echo ${{ github.event.inputs.device }}
          echo ${{ github.event.inputs.region }}
      
      - name: Download and Decrypt Firmware
        run: |
          FWFileName="latestFW.zip.enc4"
          export FMV=$(samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} checkupdate)
          echo $FMV
          echo "Downloading latest update"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} download -v $(echo $FMV) -o $(echo $FWFileName)
          echo "Decrypting Update Files"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} decrypt -v $(echo $FMV) -i $(echo $FWFileName) -V 4 -o latestFW.zip
        
      - name: Unzip Firmware and Extract AP
        run: |
          echo $FMV
          mkdir APFiles
          unzip latestFW.zip
          ls -l
          mv AP_*.tar.md5 ./APFiles
          cd APFiles
          mkdir APExtracted
          ls -l
          tar -xf AP_*.tar.md5 --verbose -C ./APExtracted
          
      - name: Measure and unpack super image
        id: superImageSIze
        run: |
          cd APFiles/APExtracted
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          chmod +x /home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/lpunpack
          chmod +x /home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/lpmake
          lz4 -d super.img.lz4 super.img
          simg2img super.img super.ext4.img
          OG_SUPER_SIZE=$(stat -c '%s' super.ext4.img)
          echo "::set-output name=ORIGINAL_SUPER_IMAGE_SIZE::$OG_SUPER_SIZE"
          mkdir superImageFiles
          ls -l
          lpunpack super.ext4.img ./superImageFiles
      
      - name: Replace old system image and measure size of partitions
        id: superImageSizes
        run: |
          cd APFiles/APExtracted/superImageFiles/
          rm system.img
          wget
          
      - name: Display Image Sizes
        id: gatherImageSizes
        run: |
          echo ${{ steps.superImageSize.outputs.ORIGINAL_SUPER_IMAGE_SIZE }}
          
        
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          # The token used to authenticate.
          token: ${{ github.token }}
          # The name of the repository.
          repository:  ${{ github.repository }}
          # The number of days.
          retain_days: 0
          # The minimum runs to keep for each workflow.
          keep_minimum_runs: 0
  
  compileFiles:
    runs-on: windows-latest
    needs: build
    steps:
      - name: testRun
        run:
          cd /
          ls
          


